#include <stdio.h>#include <stdlib.h>#include <math.h>#include <malloc.h>#include <opencv2/opencv.hpp>   #include <opencv2/core/core.hpp>   #include <opencv2/highgui/highgui.hpp>  using namespace cv;using namespace std;int main(){ int numBoards = 0; int numWidth; int numHeight; printf("Enter number of corners along width: "); scanf("%d", &numWidth); printf("Enter number of corners along height: "); scanf("%d", &numHeight); printf("Enter number of boards: "); scanf("%d", &numBoards); int numSquares = numHeight*numWidth; Size board_sz = Size(numWidth, numHeight); VideoCapture cap = VideoCapture(0); //저장 공간 할당 vector<vector<Point3f>> object_points; vector<vector<Point2f>> image_points; vector<vector<Point>> point_counts; vector<Point2f> corners; //int corner_count; int successes = 0; int step, image = 0; Mat frame, edges; cap >> frame; vector<Point3f> obj; for (int j = 0; j<numSquares; j++)  obj.push_back(Point3f(j / numWidth, j%numWidth, 0.0f)); while (successes < numBoards) {  cvtColor(frame, edges, CV_BGR2GRAY);  bool found = findChessboardCorners(frame, board_sz, corners, CV_CALIB_CB_ADAPTIVE_THRESH | CV_CALIB_CB_FILTER_QUADS);  if (found)  {   cornerSubPix(edges, corners, Size(11, 11), Size(-1, -1), TermCriteria(CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 30, 0.1));   drawChessboardCorners(frame, board_sz, corners, found);  }  imshow("win1", frame);  //imshow("edges", edges);  cap >> frame;  int key = waitKey(1);  if (key == 27)   return 0;  if (key == ' '&&found != 0)  {   image_points.push_back(corners);   object_points.push_back(obj);   printf("Snap stored!");   successes++;   if (successes >= numBoards)    break;  } } Mat intrinsic = Mat(3, 3, CV_32FC1); Mat distCoeffs = Mat(4, 1, CV_32FC1); vector<Mat> rvecs; vector<Mat> tvecs; intrinsic.ptr<float>(0)[0] = 1; intrinsic.ptr<float>(1)[1] = 1; calibrateCamera(object_points, image_points, frame.size(), intrinsic, distCoeffs, rvecs, tvecs); Mat imageUndistorted; while (1) {  cap >> frame;  undistort(frame, imageUndistorted, intrinsic, distCoeffs);  imshow("win2", frame);  imshow("win3", imageUndistorted);  waitKey(1); } cap.release(); return 0;}
